import {
  TestTransactionEvent,
  TestLog,
  TestRuntime,
} from "@tenderly/actions-test";
import { strict as assert } from "node:assert";
import { addContract, ConditionalOrder, OrderStatus, replacer, reviver, storageKey } from "../register";

const main = async () => {
  const testRuntime = new TestRuntime();

  // https://goerli.etherscan.io/tx/0x1fbf8f710a8e55ad3ce315f3f5569b06c5c45bfb20199daae40df5149792f85d#eventlog
  const alreadyIndexedLog = new TestLog();
  alreadyIndexedLog.topics = [
    "0x4af0ada67198226ad089fb87300dc01d76fb8883a59e6642c05a2f01dfd1eb67",
    "0x000000000000000000000000dc8c452d81dc5e26a1a73999d84f2885e04e9ac3",
  ];
  alreadyIndexedLog.data = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000012000000000000000000000000091056d4a53e1faa1a84306d4deaec71085394bc800000000000000000000000002abbdbaaa7b1bb64b5c878f7ac17f8dda169532000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000908f6f24ba51aaaaa00000000000000000000000000000000000000000000000002501e734690aaaa0000000000000000000000000000000000000000000000000000000063d7a487000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000000";

  const newLog = new TestLog();
  newLog.topics = [
    "0x4af0ada67198226ad089fb87300dc01d76fb8883a59e6642c05a2f01dfd1eb67",
    "0x000000000000000000000000EeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
  ];
  newLog.data = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000012000000000000000000000000002abbdbaaa7b1bb64b5c878f7ac17f8dda16953200000000000000000000000091056d4a53e1faa1a84306d4deaec71085394bc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000908f6f24ba51aaaaa00000000000000000000000000000000000000000000000002501e734690aaaa0000000000000000000000000000000000000000000000000000000063d7a487000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000000"

  const event = new TestTransactionEvent();
  event.logs.push(alreadyIndexedLog);
  event.logs.push(newLog);
  event.network = "mainnet";

  const safeOrders = new Map<string, Set<ConditionalOrder>>();
  const conditionalOrderSet = new Set<ConditionalOrder>();
  conditionalOrderSet.add({
    payload: "0x00000000000000000000000091056d4a53e1faa1a84306d4deaec71085394bc800000000000000000000000002abbdbaaa7b1bb64b5c878f7ac17f8dda169532000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000908f6f24ba51aaaaa00000000000000000000000000000000000000000000000002501e734690aaaa0000000000000000000000000000000000000000000000000000000063d7a487000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000000",
    orders: new Map<string, OrderStatus>()
  });
  safeOrders.set("0xdc8c452D81DC5E26A1A73999D84f2885E04E9AC3", conditionalOrderSet);
  await testRuntime.context.storage.putStr(storageKey(event.network), JSON.stringify(safeOrders, replacer));

  await testRuntime.execute(addContract, event);

  const storage: Map<string, Set<ConditionalOrder>> = JSON.parse(await testRuntime.context.storage.getStr(
    storageKey(event.network)
  ), reviver);
  console.log(storage);
  assert(
    storage.size == 2,
    "Incorrect amount of contracts indexed"
  );
  assert(
    storage.has("0xdc8c452D81DC5E26A1A73999D84f2885E04E9AC3"),
    "Missing already indexed contract"
  );
  assert(
    storage.has("0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"),
    "Missing new contract"
  );
};

(async () => await main())();
